// 'use strict';

// console.log(this);

// function declaration (оголошення функції)

function foo() {
  console.log(this);
}
// foo();

// function expression (функціональний вираз)
const boo = function () {
  console.log(this);
};
// boo();
console.dir(boo);

// arrow function (стрілочна функція)
const arrow = () => {
  console.log(this);
};
// arrow();

// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ Методы Array
// Array имеет свойство length, 36 методов на прототипе -  и 4 статических метода.

// статические методы Array
from(arrayLike, Opt|mapFn, Opt|thisArg) // 👉 создает новый массив из итерируемого объекта (например, строки, массивоподобного объекта или итератора) и/или выполняет преобразование элементов массива с помощью функции-аргумента.
fromAsync(arrayLike, Opt|mapFn(elem, i), Opt|thisArg) // 👉 аналогичный методу from(), но позволяющий асинхронно преобразовывать элементы массива с помощью функции-аргумента.
isArray(obj) // 👉 проверяет, является ли заданный объект массивом, и возвращает булевое значение.
of(elementN) // 👉 ссоздаёт новый экземпляр массива Array из произвольного числа аргументов, вне зависимости от числа или типа переданого аргумента.

// НА ПРОТОТИПЕ (36)
map(callback(currentValue, Opt|i, Opt|arr), Opt|thisArg) // 👉 создает новый массив, применяя заданную функцию к каждому элементу массива. Не мутирует, возвращает новый масив.
filter(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 создает новый массив, который содержит только те элементы, для которых заданная функция возвращает true. Не мутирует, возвращает новый масив.
forEach(callback(currentValue, Opt|i, Opt|arr), Opt|thisArg) // 👉 выполняет заданную функцию для каждого элемента массива. Не мутирует, возвращает undefined.
reduce(callback(acc, currentValue, Opt|i, Opt|arr), Opt|initialValue) // 👉 поелементно перебберает масив обрабатывает каждый елемент с сохранением промежуточного значения. Не мутирует, возвращает undefined.
reduceRight(callback(acc, currentValue, Opt|i, Opt|arr), Opt|initialValue) // 👉 аналогично работе метода reduce только елементы перебираутся с права на лево.
some(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 возвращает true, если заданная функция возвращает true для хотя бы одного элемента массива.
every(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 возвращает true, если заданная функция возвращает true для каждого элемента массива.
find(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 возвращает первый элемент массива, для которого заданная функция возвращает true.
findLast(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 метод, который возвращает последний элемент массива, удовлетворяющий условию заданному в функции-аргументе или undefined.
findIndex(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 возвращает индекс в массиве, если элемент удовлетворяет условию проверяющей функции. В противном случае возвращается -1.
findLastIndex(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 метод, который возвращает индекс последнего элемента массива, удовлетворяющего условию заданному в функции-аргументе или -1.
indexOf(searchElement, fromIndex) // 👉 возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.
lastIndexOf(searchElement, fromIndex) // 👉 возвращает последний индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет. Массив просматривается от конца к началу, начиная с индекса fromIndex.
includes(searchElement, Opt|fromIndex) // 👉 возвращает true, если массив содержит указанный элемент.
group(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 метод, который группирует элементы массива по заданному критерию и возвращает объект, содержащий группы.
groupToMap(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 метод, который группирует элементы массива по заданному критерию и возвращает Map объект, содержащий группы.

at(index) // 👉 метод, который возвращает элемент массива по заданному индексу. Если индекс отрицательный, то он считается с конца массива.
concat(arr, arr, arr) // 👉 метод, который создает новый массив, добавляя к текущему массиву один или несколько массивов или значения. Не мутирует.
flat(Opt|depth) // 👉 метод, который создает новый массив, в котором все вложенные подмассивы "выравниваются" до указанной глубины. По умолчанию на один уровень.
flatMap(callback(el, Opt|i, Opt|arr), Opt|thisArg) // 👉 метод, который создает новый массив путем применения функции-аргумента к каждому элементу исходного массива (как map) и объединения результата в новый массив в котором все вложенные подмассивы "поднимаются" на 1 уровень глубины (как flat). Все равно что на масиве по цепочке вызвать map и на результате map вызвать flat.
join(separator) // 👉 метод, который объединяет все элементы массива в строку, разделяя их заданным разделителем.
//  ❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️
+ push() // 👉 ❗️ метод, который добавляет один или несколько элементов в конец массива и возвращает новую длину массива.
+ unshift() // 👉 ❗️ метод, который добавляет один или несколько элементов в начало массива и возвращает новую длину массива.
pop() // 👉 ❗️ метод, который удаляет последний элемент массива и возвращает его или undefined если масив пустой.
shift() // 👉 ❗️ метод, который удаляет первый элемент массива и возвращает его или undefined если масив пустой.
splice(startI, Opt|deleteCount, Opt|itemN) // 👉 ❗️ метод, который изменяет содержимое массива, удаляя и/или заменяя элементы.  Возвращает удаленные елементы или пустой масив.
reverse() // 👉 ❗️ метод, который меняет порядок элементов в массиве на обратный. Мутирует масив. 
sort(compareFunction) // 👉 ❗️ метод, который сортирует элементы массива по возрастанию или убыванию(если передать compareFunction (a, b) => b - a). 
fill(value, start, end) // 👉 метод, который заполняет все элементы массива одним и тем же значением.
copyWithin(target, start, end) // 👉 метод, который копирует последовательность элементов массива внутри него же, не изменяя длину массива.
//  ❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️
slice(Opt | beginI, Opt | endI) // 👉 метод, который создает новый массив, содержащий копию части исходного массива.
toLocaleString() // 👉 метод, который возвращает строку, представляющую массив, где каждый элемент преобразуется в строку с помощью собственного метода toLocaleString().
toString() // 👉 метод, который возвращает строковое представление указанного массива и его элементов.
keys() // 👉 метод, который возвращает итератор для ключей (индексов) массива. 
values() // 👉 метод, который возвращает итератор для значений массива.
entries() // 👉 метод, который возвращает итератор для пар ключ(индекс)-значение массива.


// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ Методы Object
// Object имеет свойство constructor, 6 методов на прототипе -  и 22 статических метода.

constructor // 👉  Возвращает ссылку на функцию Object, создавшую прототип экземпляра.

// НА ПРОТОТИПЕ (6)
hasOwnProperty(prop) // 👉 метод, который возвращает логическое значение true, если объект содержит указанное свойство, определенное в объекте, а не в его прототипе.
isPrototypeOf(object) // 👉 метод, который возвращает логическое значение true, если объект является прототипом другого объекта.
propertyIsEnumerable(prop) // 👉 метод, который возвращает логическое значение true, если указанное свойство является перечисляемым (enumerable) свойством объекта.  (цикл for...in)
toLocaleString() // 👉 метод, который возвращает строковое представление объекта, используя локальные настройки языка для отображения чисел, дат и времени.
toString() // 👉 метод, который возвращает строковое представление объекта.
valueOf() // 👉 метод, который возвращает примитивное значение объекта. Обычно это примитивное значение является числом или строкой, соответствующим свойству объекта.

// СТАТИЧЕСКИЕ (22)
assign(target, sources) // 👉 метод, который копирует значения всех перечисляемых свойств из одного или нескольких исходных объектов в целевой объект и возвращает целевой объект. Метод мутирует целевой объект, чтобы етого избежать первым аргументом передают пустой объект {}. Можна заменить оператором ...spred.
create(protoObj) // 👉 метод, который создает новый объект с заданным прототипом и свойствами.
defineProperties(obj, props) // 👉 определяет новые или изменяет существующие свойства, непосредственно на объекте, возвращая этот объект
defineProperty(obj, prop, descriptor) // 👉 метод, который определяет или изменяет отдельное свойство объекта и возвращает измененный объект.
freeze(obj) // 👉 метод, который замораживает объект делая его ефективно неизменным.(нельзя добавлять, удалять, изменять, настраивать)
isFrozen(obj) // 👉 метод, который проверяет, заморожен ли объект, и возвращает булево значение.
seal(obj) // 👉 запечатывает объект. То есть его значения нельзя добавлять, настраивать но можно изменить и удалять.
isSealed(obj) // 👉 метод, который проверяет, запечатан ли объект, и возвращает булево значение.
preventExtensions(obj) // 👉 метод, который запрещает добавлять новые свойства к объекту. Объект делается нерасширяемым.
isExtensible(obj) // 👉 метод, который проверяет, можно ли добавлять новые свойства к объекту, и возвращает булево значение.
is(value1, value2) // 👉 метод, который сравнивает два значения на равенство и возвращает булево значение.
getPrototypeOf(obj) // 👉 метод, который возвращает прототип объекта.
setPrototypeOf(obj) // 👉 метод, который устанавливает прототип (то есть, внутреннее свойство [[Prototype]]) указанного объекта в другой объект или null.
hasOwn(prop) // 👉 метод, который определяет, содержит ли объект собственное свойство с заданным именем.
getOwnPropertyNames(obj) // 👉 метод, который возвращает массив со всеми именами собственных (не унаследованных) свойств объекта.
getOwnPropertySymbols(obj) // 👉 метод, который возвращает массив со всеми символьными собственными свойствами объекта.
getOwnPropertyDescriptor(obj, prop) // 👉 метод, который возвращает дескриптор свойства объекта.
getOwnPropertyDescriptors(obj) // 👉 метод, который возвращает все дескрипторы свойств объекта.
keys(obj) // 👉 метод, который возвращает массив со всеми перечисляемыми свойствами объекта, за исключением символьных.
values(obj) // 👉 метод, который возвращает массив со значениями всех перечисляемых свойств объекта в том же порядке, в котором они были перечислены с помощью цикла for...in. Значения извлекаются только для свойств, которые имеют собственные имена, а не унаследованные. Если объект не имеет перечисляемых свойств, метод вернет пустой массив.
entries(obj) // 👉 метод, который возвращает массив, содержащий все перечисляемые свойства объекта в виде массивов [ключ, значение].
fromEntries(iterable) // 👉 метод, который создает новый объект из массива пар [ключ, значение]. Антогонист entries.


// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ Методы String
// String имеет свойство length, 32 метода на прототипе -  и 3 статических метода.

// СТАТИЧЕСКИЕ (3)
fromCharCode(num1, num2, numN) // 👉 метод, который возвращает строку, созданную из указанных кодовых значений Unicode.
fromCodePoint(num1, num2, numN) // 👉 метод, который возвращает строку, созданную из указанных кодовых значений Unicode, даже если они выходят за пределы 16-битного диапазона (который используется методом String.fromCharCode()).
raw() // 👉 это метод, который возвращает необработанную (raw) строку, в которой экранированные символы остаются в их исходном формате. Метод может использоваться вместе с шаблонными строками (template strings) и принимает два аргумента: массив строковых значений и неограниченное количество аргументов, которые будут подставляться в шаблонную строку.

// НА ПРОТОТИПЕ (32)
at(index) // 👉 возвращает символ строки с указанным индексом. Если указать отрицательное число то отсчет необходимого символа будет совершен с конца строки. 
charAt(index) // 👉 возвращает символ строки с указанным индексом.
charCodeAt(index) // 👉 возвращает код Unicode символа строки с указанным индексом.
codePointAt(index) // 👉 возвращает неотрицательное целое число, являющееся закодированным в UTF-16 значением кодовой точки.
concat(str1, str2, strN) // 👉 объединяет текст из двух или более строк и возвращает новую строку.
endsWith(searchString, length) // 👉 проверяет, заканчивается ли строка на указанную подстроку. Второй параметр позволяет искать внутри строки, обрезая её по диапазону; по умолчанию равен длине строки.
startsWith(searchString, position) // 👉 проверяет, начинается ли строка с указанной подстроки возвращая, соответственно, true или false.
includes(searchString, position) // 👉 проверяет, содержится ли указанная подстрока внутри строки. Второй параметр - позиция в строке, с которой начинать поиск строки searchString, по умолчанию 0.
indexOf(searchValue, fromIndex) // 👉 возвращает индекс первого вхождения указанного значения в строку или -1. Второй параметр - позиция в строке, с которой начинать поиск строки searchString, по умолчанию 0.
lastIndexOf(searchValue, fromIndex) // 👉 возвращает индекс последнего вхождения указанного значения в строку или -1.
localeCompare(compareString) // 👉 сравнивает две строки в заданной локали и возвращает число (-1, 0 или 1), указывающее, какая из строк находится в лексикографическом порядке раньше или 0 если на одном уровне.
repeat(count) // 👉 повторяет текущую строку заданное число раз.
replace(searchValue, replaceValue) // 👉 заменяет первое вхождение указанного значения в строке заданным значением.
replaceAll(searchValue, replaceValue) // 👉 заменяет все вхождения указанного значения в строке заданным значением.
search(regexp) // 👉 выполняет поиск сопоставления между регулярным выражением и строкой.
slice(startIndex, endIndex) // 👉 возвращает часть строки от начального индекса до конечного индекса (не включая символ с индексом конечного индекса).
split(separator, limit) // 👉 разбивает строку на массив подстрок, используя указанный разделитель и ограничение на количество элементов в массиве.
substring(startIndex, endIndex) // 👉 возвращает часть строки от начального индекса до конечного индекса (не включая символ с индексом конечного индекса).
toLocaleLowerCase([locales]) // 👉 возвращает строку, преобразованную в нижний регистр с учётом заданных локалей.
toLocaleUpperCase([locales]) // 👉 возвращает строку, преобразованную в верхний регистр с учётом заданных локалей.
toLowerCase() // 👉 возвращает строку, преобразованную в нижний регистр.
toUpperCase() // 👉 возвращает строку, преобразованную в верхний регистр.
toString() // 👉 возвращает строковое представление объекта.
trim() // 👉 удаляет пробельные символы в начале и конце строки.
trimEnd() // 👉 удаляет пробельные символы в конце строки.
trimStart() // 👉 удаляет пробельные символы в начале строки.
valueOf() // 👉 возвращает примитивное значение объекта String в виде строкового типа данных. Это значение эквивалентно значению вызова метода toString().
padEnd(targetLength, padString) // 👉 добавляет указанную строку к концу текущей строки до заданной длины.
padStart(targetLength, padString) // 👉 добавляет указанную строку к началу текущей строки до заданной длины.
match(regexp) // 👉 возвращает получившиеся совпадения при сопоставлении строки с регулярным выражением или Null.
matchAll(regexp) // 👉 возвращает итератор со всеми совпадениями заданного регулярного выражения в строке.
normalize(form) // 👉 нормализует строку в заданной форме (например, NFC, NFD, NFKC, NFKD).

// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ Методы Number
// Number имеет 8 свойств, 6 методов на прототипе -  и 6 статических метода.

// СВОЙСТВА (8)
EPSILON // 👉 Разница между 1 и наименьшим числом с плавающей запятой, большим чем 1, которое может быть представлено типом Number. 2.22044..
NaN // 👉 Специальное значение "не число" (Not-a-Number) в JavaScript. Это значение возвращается при выполнении математических операций, которые не могут быть вычислены (например, деление на ноль).
MAX_SAFE_INTEGER // 👉 Наибольшее целое число, которое можно безопасно использовать в JavaScript без потери точности. Это число равно 2^53 - 1.
MIN_SAFE_INTEGER // 👉 Наименьшее целое число, которое можно безопасно использовать в JavaScript без потери точности. Это число равно -(2^53 - 1).
MAX_VALUE // 👉 Наибольшее положительное число, которое можно представить в JavaScript.
MIN_VALUE // 👉 Наименьшее положительное число, которое можно представить в JavaScript. Оно близко к 5e-324.
NEGATIVE_INFINITY // 👉 Специальное значение, представляющее отрицательную бесконечность в JavaScript. Это значение возвращается, когда результат математической операции слишком мал для представления в JavaScript.
POSITIVE_INFINITY // 👉 Специальное значение, представляющее положительную бесконечность в JavaScript. Это значение возвращается, когда результат математической операции слишком велик для представления в JavaScript.
 


// СТАТИЧЕСКИЕ (6)
isFinite(testValue) // 👉 проверяет является ли аргумент конечным числом (true) и false, если аргумент является NaN (не числом), бесконечностью или любым другим значением, не являющимся числом.
isInteger(value) // 👉 проверяет является ли аргумент целым числом (true) и false, если аргумент имеет дробную часть или не является числом.
isNaN(value) // 👉 метод проверяющий на NaN
isSafeInteger(testValue) // 👉 метод проверяет является ли число безопасным ЦЕЛЫМ числом которое входит в диапазон безопасных чиисел.
parseFloat(string) // 👉 преобразует переданную строку в число с плавающей запятой и возвращает полученное число или NaN если нельзя роспарсить.
parseInt(string, radix) // 👉 преобразует переданную строку в число и возвращает полученное ЦЕЛОЕ число или NaN если нельзя роспарсить.

// НА ПРОТОТИПЕ (6)
toExponential() // 👉 метод, который преобразует число в строку в экспоненциальной записи с фиксированным количеством знаков после запятой. Экспоненциальноая запись - это способ представления числа в виде произведения мантиссы и степени числа 10. (123456 => 1.23456e+5 это означает, что число 123456 эквивалентно числу 1.23456 (мантисса) умноженному на 10 в степени 5 (или 100000).)
toFixed() // 👉 метод, который преобразует число в строку, округляя его до заданного количества знаков после запятой.
toPrecision() // 👉 метод, который преобразует число в строку с заданным количеством значащих (больше 0) цифр. В качестве аргумента метод принимает число, которое указывает количество значащих цифр.
toLocaleString() // 👉 метод, который возвращает строку, представляющую число в локализованном формате. Форматирование зависит от языка и настроек региональных параметров.
toString() // 👉 метод, который преобразует число в строку. В качестве аргумента метод принимает основание системы счисления (от 2 до 36), в которой будет представлено число. Если аргумент не указан, число будет преобразовано в десятичную систему счисления.
valueOf() // 👉 метод, который возвращает примитивное значение числа (число), на котором был вызван метод. Метод используется для явного преобразования объекта Number в примитивное значение.

// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ Set - колекция уникальных значений любого типа. Сет используют для того что бы отфильтровать уникальные значения, потом, как правило, преобразовуют в масив (оператором ... spread). 
// В Set одно свойство size и 8 методов.

add             () // 👉 мутирует, возвращает измененный set // 👉 добавить елемент
clear           () // 👉 мутирует, возвращает undefined // 👉 удалить все елементы
delete          () // 👉 мутирует, возвращает true - елемент удален, false - елемент не найден // 👉 удалить елемент
has             () // 👉 возвращает true - есть в колекции, false - не найден в колекции // 👉 проверить наличие елемента
forEach         () // 👉 возвращает undefined, выполняет функцию по одному разу для каждого элемента из Set в порядке их расположения. 
entries         () // 👉 возвращает новый Итератор, который содержит массив [значение, значение] для каждого элемента.
keys            () // 👉 возвращает новый объек-итератор для каждого элемента.
values          () // 👉 возвращает новый объек-итератор для каждого элемента.

// Map - Объект который содержит пары ключ-значение и запоминает исходный порядок вставки ключей. Любое значение (как объекты, так и примитивные значения ) можно использовать как ключ или значение. 
// В Map одно свойство size и 9 методов.

set             (key, value) // 👉 мутирует, возвращает измененный map // добавить елемент принимает ключ и значение
clear           () // 👉 мутирует, возвращает undefined // удалить все елементы
delete          (key) // 👉 мутирует, возвращает true - елемент удален, false - елемент не найден // удалить елемент по ключу
has             (key) // 👉 возвращает true - есть в колекции, false - не найден в колекции // проверить наличие елемента
get             (key) // 👉 возвращает елемент объекта по ключу
forEach         () // 👉 возвращает undefined, выполняет функцию по одному разу для каждй пары [key, value]
entries         () // 👉 возвращает новый Итератор, который содержит массив [key, value] для каждого элемента
keys            () // 👉 возвращает новый объек-итератор в котором содержится ключ каждого элемента.
values          () // 👉 возвращает новый объек-итератор в котором содержится значения каждого элемента.


// WeakSet - тоже что и set, но в качестве елемента могут быть только объекты с уникальными ссылками. Если объект используется только в WeakSet то он удаляеться сборщиком мусора. Также WeakSet не итерируем, так как нет возможности получить список текущих хранимых в WeakSet объектов. 
// WeakSet только три метода. 
add             (obj) 
delete          (obj) 
has             (obj)


// WeakMap - тоже что и map, но в качестве ключей могут быть использованы только объекты и незареестрированные symbol. Если объектКлюч используется только в WeakMap то он удаляеться сборщиком мусора. 
// WeakMap только 4 метода. 
set             (objKey, value) 
delete          (objKey)
has             (objKey)
get             (objKey)


// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ PROMISE - ето объект в JavaScript, который предоставляет результат виполнения асинхронной функции.
// Объект Promise используется для отложенных и асинхронных вычислений.
// У Promise есть два состояния:
// Pending - ожидание,
// Settled - выполнен:
//   - Fulfilled - выполнен успешно;
//   - Rejected -  выполнен с ошибкой.

// У Promise есть 9 методов.

then // 👉 принимает два колбека для случаев выполнения и отклонения промиса. Возвращает промис.
catсh // 👉 принимает колбек. Возвращает промис и работает только в случае отклонения промиса.
finally // 👉 принимает колбек который будет выполнен вне зависимости успешно или с ошибкой выполнился промис. Возвращает промис.
reject // 👉 возвращает объект Promise, который был отклонён по указанной причине.
resolve // 👉 возвращает Promise выполненный с переданным значением.
all // 👉 принемает масив промисов и возвращает промис который выполнится, как только все промисы масива выполнятся или хотя бы один будет отклен.
allSettled // 👉 принемает масив промисов ждет когда они выполнятся и возвращает промис содержащий массив результатов исполнения полученных промисов. 
any // 👉 принемает масив промисов и возвращает промис со значением ПЕРВОГО выполненного промиса или будет откленен со значением массива содержащего причины ошибки если все промисы масива будут отклонены.
race // 👉 принемает масив промисов, возвращает ПЕРВЫЙ выполненный или отклонённый промис со значением или причиной отклонения этого промиса.


// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ THIS - ето ссылка на объект в контексте которого вызавается функция.

// this определяется тем, каким образом вызвана функция, а не как она объявлена. Одна и та же функция может иметь разный this.

// this в arrow function определяется лексическим окружением в котором она была создана.

bind // 👉   метод который возвращат копию функции с привязаным контекстом и передаными аргументами. Не изменяет функцию на которой вызывается. Как аргументы принимает первый аргумент контекст(ссылка на объект в контекст которгого будет привязан к функции) и через запетую произвольное количество аргумментов которые передадутся в новую функцию как аргументы.
call // 👉  метод который вызывает фнкцию с указаным контекстом. Не изменяет функцию на которой вызывается. Как аргументы принимает первый аргумент контекст(ссылка на объект в контексте котором будет вызвана функция) и через запетую произвольное количество аргумментов которые передадутся в функцию как аргументы.
apply // 👉  метод который вызывает фнкцию с указаным контекстом. Не изменяет функцию на которой вызывается. Как аргументы принимает первый аргумент контекст(ссылка на объект в контексте котором будет вызвана функция) и через запетую второй аргумент масив с произвольным количеством аргумментов которые передадутся в функцию как аргументы.

// При type="module" this глобальной области видимости и this функций визваных без контекста - undefined.

// При исполнении кода без type="module" но в режиме 'use strict'; this - глобальной области видимости и this стрелки зсилается window. this вызваных без контккста функций и функциональных выражений - undefined.

// При виконанні коду без type="module" і без 'use strict'; this - глобальной области видимости, this стрелки и this вызваных без контккста функций и функциональных выражений - зсилается на window.


// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ EVENT LOOP (FIFO - first in first out) - цикл обработки событий. Концепция обработки асинхронного кода. 

// Микро (мелкие) задачи
// К микрозадачам относятся:
// - промисы (выполнение обработчика .then.cath.finaly)
// - await так как ето форма обработки промиса

// При выполнении асинхронного кода выполняются после выполнения синхронного кода в первую очередь.

// Макро (большие) задачи
// При выполнении асинхронного кода выполняются после выполнения синхронного кода и Микро задач.
// К макрозадачам относятся:
// - зареестрирование функции в setTimeout и setInterval.
// - функции исполнения событый event handlers
// - асинхронные операции загрузки контента (изображения, видео, аудио)


// ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
// ✅✅✅✅✅ ПРОТОТИПЫ. ПРОТОТИПНОЕ НАСЛЕДОВАНИЕ - ето механизм позволяющий объектам унаследовать и использовать свойства и методы других объектов.

// У каждого объекта есть свойство __proto__ в котором лежит ссылка на ПРОТОТИП.

// При создании екземпляра с помощью оператора new или статического метода обьекта CREATE, в свойство __proto__ записывается ссилка на prototype функции конструктора. В prototype функции конструктора хранятся все методы которые потом по ссылке доступны и могут быть использованы екземплярами етой функции конструктора.

// если объявлять методи внутри функции конструктора (класа) то на екземплярах етой функции конструктора (класах) будут хранится КОПИИ методов.

// ФУНУЦИЯ КОНСТРУКТОР
// ЕКЗЕПЛЯР

// Cтатические cвойства и методы.
// Статтические методы доступны на самом конструкторе.
// В статических методах this ссылается на свою же функцию конструктор что безполезно.

// в свойстве объекта __proto__ хранится ссылка на объект который является прототипом текущего объекта. Объекты между собой связываются с помощъю Object.create(obj).

// [[Prototype]] - это внутреннее свойство объекта в JavaScript, которое указывает на его прототип.
// __proto__ - это свойство объекта, которое предоставляет доступ к его прототипу. Это свойство обеспечивает удобный способ доступа к [[Prototype]] из кода, так как [[Prototype]] является внутренним свойством и не доступно напрямую из кода.
